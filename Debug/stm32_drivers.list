
stm32_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000068c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000824  0800082c  0001082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000824  08000824  0001082c  2**0
                  CONTENTS
  4 .ARM          00000000  08000824  08000824  0001082c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000824  0800082c  0001082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000824  08000824  00010824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000828  08000828  00010828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001082c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800082c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800082c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001082c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000aba  00000000  00000000  0001085c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002be  00000000  00000000  00011316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  000115d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b0  00000000  00000000  000116b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025b2  00000000  00000000  00011760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e48  00000000  00000000  00013d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009c0e  00000000  00000000  00014b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001e768  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002d4  00000000  00000000  0001e7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800080c 	.word	0x0800080c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800080c 	.word	0x0800080c

080001d8 <delay>:
#include <string.h>
#include "../../drivers/inc/stm32f411x.h"

#define FCLK            4000000

void delay(int delay_ms) {
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < (FCLK * delay_ms) / 1000; ++i);
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e002      	b.n	80001ec <delay+0x14>
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80001f2:	fb02 f303 	mul.w	r3, r2, r3
 80001f6:	68fa      	ldr	r2, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	dbf4      	blt.n	80001e6 <delay+0xe>
}
 80001fc:	bf00      	nop
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <main>:

int main(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af00      	add	r7, sp, #0
    // configure led

    GPIO_Handle_t PD13_ORANGE_LED;
    memset(&PD13_ORANGE_LED, 0, sizeof(PD13_ORANGE_LED));
 8000212:	f107 030c 	add.w	r3, r7, #12
 8000216:	220c      	movs	r2, #12
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f000 faee 	bl	80007fc <memset>

    PD13_ORANGE_LED.pGPIOx = GPIOD;
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <main+0x74>)
 8000222:	60fb      	str	r3, [r7, #12]
    PD13_ORANGE_LED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000224:	230d      	movs	r3, #13
 8000226:	743b      	strb	r3, [r7, #16]
    PD13_ORANGE_LED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000228:	2301      	movs	r3, #1
 800022a:	747b      	strb	r3, [r7, #17]
    PD13_ORANGE_LED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800022c:	2300      	movs	r3, #0
 800022e:	74bb      	strb	r3, [r7, #18]
    PD13_ORANGE_LED.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 8000230:	2300      	movs	r3, #0
 8000232:	753b      	strb	r3, [r7, #20]
    PD13_ORANGE_LED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000234:	2300      	movs	r3, #0
 8000236:	74fb      	strb	r3, [r7, #19]

    GPIO_Init(&PD13_ORANGE_LED);
 8000238:	f107 030c 	add.w	r3, r7, #12
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f8cb 	bl	80003d8 <GPIO_Init>

    GPIO_WritePin(GPIOD, GPIO_PIN_NO_13, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	210d      	movs	r1, #13
 8000246:	480e      	ldr	r0, [pc, #56]	; (8000280 <main+0x74>)
 8000248:	f000 fa34 	bl	80006b4 <GPIO_WritePin>

    // configure button

    GPIO_Handle_t PA0_USER_BUTTON;
    memset(&PA0_USER_BUTTON, 0, sizeof(PA0_USER_BUTTON));
 800024c:	463b      	mov	r3, r7
 800024e:	220c      	movs	r2, #12
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fad2 	bl	80007fc <memset>

    PA0_USER_BUTTON.pGPIOx = GPIOA;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <main+0x78>)
 800025a:	603b      	str	r3, [r7, #0]
    PA0_USER_BUTTON.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800025c:	2300      	movs	r3, #0
 800025e:	713b      	strb	r3, [r7, #4]
    PA0_USER_BUTTON.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 8000260:	2305      	movs	r3, #5
 8000262:	717b      	strb	r3, [r7, #5]
    PA0_USER_BUTTON.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000264:	2300      	movs	r3, #0
 8000266:	71bb      	strb	r3, [r7, #6]
    PA0_USER_BUTTON.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PD;
 8000268:	2302      	movs	r3, #2
 800026a:	71fb      	strb	r3, [r7, #7]

    GPIO_IRQ_InterruptConfig(IRQ_NO_EXTI0, ENABLE);
 800026c:	2101      	movs	r1, #1
 800026e:	2006      	movs	r0, #6
 8000270:	f000 fa56 	bl	8000720 <GPIO_IRQ_InterruptConfig>
    GPIO_Init(&PA0_USER_BUTTON);
 8000274:	463b      	mov	r3, r7
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f8ae 	bl	80003d8 <GPIO_Init>

    for(;;) {
 800027c:	e7fe      	b.n	800027c <main+0x70>
 800027e:	bf00      	nop
 8000280:	40020c00 	.word	0x40020c00
 8000284:	40020000 	.word	0x40020000

08000288 <EXTI0_IRQHandler>:
    }
}

void EXTI0_IRQHandler() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
    delay(100);
 800028c:	2064      	movs	r0, #100	; 0x64
 800028e:	f7ff ffa3 	bl	80001d8 <delay>
    GPIO_IRQ_Handling(GPIO_PIN_NO_0);
 8000292:	2000      	movs	r0, #0
 8000294:	f000 fa6e 	bl	8000774 <GPIO_IRQ_Handling>
    GPIO_TogglePin(GPIOD, GPIO_PIN_NO_13);
 8000298:	210d      	movs	r1, #13
 800029a:	4802      	ldr	r0, [pc, #8]	; (80002a4 <EXTI0_IRQHandler+0x1c>)
 800029c:	f000 fa2b 	bl	80006f6 <GPIO_TogglePin>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fa6d 	bl	80007b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff97 	bl	800020c <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	0800082c 	.word	0x0800082c
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>

080002fa <GPIO_SetReg>:
#include "../../drivers/inc/stm32f411x.h"

void GPIO_SetReg(uint8_t cfg_reg, volatile uint32_t *ll_reg, uint8_t pinNumber, uint8_t bitsPerPin) {
 80002fa:	b480      	push	{r7}
 80002fc:	b085      	sub	sp, #20
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	4611      	mov	r1, r2
 8000304:	461a      	mov	r2, r3
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
 800030a:	460b      	mov	r3, r1
 800030c:	71bb      	strb	r3, [r7, #6]
 800030e:	4613      	mov	r3, r2
 8000310:	717b      	strb	r3, [r7, #5]
    // set low level register using the value set by the user
    uint8_t clearMask;
    if (bitsPerPin == 1) clearMask = 0b1;
 8000312:	797b      	ldrb	r3, [r7, #5]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d101      	bne.n	800031c <GPIO_SetReg+0x22>
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
    if (bitsPerPin == 2) clearMask = 0b11;
 800031c:	797b      	ldrb	r3, [r7, #5]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d101      	bne.n	8000326 <GPIO_SetReg+0x2c>
 8000322:	2303      	movs	r3, #3
 8000324:	73fb      	strb	r3, [r7, #15]
    if (bitsPerPin == 4) clearMask = 0b1111;
 8000326:	797b      	ldrb	r3, [r7, #5]
 8000328:	2b04      	cmp	r3, #4
 800032a:	d101      	bne.n	8000330 <GPIO_SetReg+0x36>
 800032c:	230f      	movs	r3, #15
 800032e:	73fb      	strb	r3, [r7, #15]
    *ll_reg &= ~(clearMask << bitsPerPin * pinNumber);
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	7bf9      	ldrb	r1, [r7, #15]
 8000336:	797a      	ldrb	r2, [r7, #5]
 8000338:	79b8      	ldrb	r0, [r7, #6]
 800033a:	fb00 f202 	mul.w	r2, r0, r2
 800033e:	fa01 f202 	lsl.w	r2, r1, r2
 8000342:	43d2      	mvns	r2, r2
 8000344:	401a      	ands	r2, r3
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	601a      	str	r2, [r3, #0]
    *ll_reg |= cfg_reg << (bitsPerPin * pinNumber);
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	79f9      	ldrb	r1, [r7, #7]
 8000350:	797a      	ldrb	r2, [r7, #5]
 8000352:	79b8      	ldrb	r0, [r7, #6]
 8000354:	fb00 f202 	mul.w	r2, r0, r2
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	431a      	orrs	r2, r3
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	601a      	str	r2, [r3, #0]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <convertAddrToCode>:

uint8_t convertAddrToCode(GPIO_RegDef_t *pGPIOx) {
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
    if (pGPIOx == GPIOA) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <convertAddrToCode+0x54>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d101      	bne.n	8000384 <convertAddrToCode+0x14>
        return 0;
 8000380:	2300      	movs	r3, #0
 8000382:	e018      	b.n	80003b6 <convertAddrToCode+0x46>
    } else if (pGPIOx == GPIOB) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <convertAddrToCode+0x58>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d101      	bne.n	8000390 <convertAddrToCode+0x20>
        return 1;
 800038c:	2301      	movs	r3, #1
 800038e:	e012      	b.n	80003b6 <convertAddrToCode+0x46>
    } else if (pGPIOx == GPIOC) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <convertAddrToCode+0x5c>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d101      	bne.n	800039c <convertAddrToCode+0x2c>
        return 2;
 8000398:	2302      	movs	r3, #2
 800039a:	e00c      	b.n	80003b6 <convertAddrToCode+0x46>
    } else if (pGPIOx == GPIOD) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <convertAddrToCode+0x60>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d101      	bne.n	80003a8 <convertAddrToCode+0x38>
        return 3;
 80003a4:	2303      	movs	r3, #3
 80003a6:	e006      	b.n	80003b6 <convertAddrToCode+0x46>
    } else if (pGPIOx == GPIOE) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <convertAddrToCode+0x64>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d101      	bne.n	80003b4 <convertAddrToCode+0x44>
        return 4;
 80003b0:	2304      	movs	r3, #4
 80003b2:	e000      	b.n	80003b6 <convertAddrToCode+0x46>
    } else {
        return 7;
 80003b4:	2307      	movs	r3, #7
    }
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40020000 	.word	0x40020000
 80003c8:	40020400 	.word	0x40020400
 80003cc:	40020800 	.word	0x40020800
 80003d0:	40020c00 	.word	0x40020c00
 80003d4:	40021000 	.word	0x40021000

080003d8 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIO_Handle) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
    GPIO_PCLK_Control(pGPIO_Handle->pGPIOx, ENABLE);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2101      	movs	r1, #1
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f8ce 	bl	8000588 <GPIO_PCLK_Control>

    uint8_t pinNumber = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	72fb      	strb	r3, [r7, #11]
    // 1. configure mode
    if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	795b      	ldrb	r3, [r3, #5]
 80003f6:	2b03      	cmp	r3, #3
 80003f8:	d809      	bhi.n	800040e <GPIO_Init+0x36>
        // IN, OUT, ALTERNATE, ANALOG
        GPIO_SetReg(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode, &pGPIO_Handle->pGPIOx->MODER, pinNumber, 2);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	7958      	ldrb	r0, [r3, #5]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4619      	mov	r1, r3
 8000404:	7afa      	ldrb	r2, [r7, #11]
 8000406:	2302      	movs	r3, #2
 8000408:	f7ff ff77 	bl	80002fa <GPIO_SetReg>
 800040c:	e07a      	b.n	8000504 <GPIO_Init+0x12c>
    } else {
        // Configure the type of interrupt trigger (falling trigger, rising trigger, both)
        if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	795b      	ldrb	r3, [r3, #5]
 8000412:	2b04      	cmp	r3, #4
 8000414:	d115      	bne.n	8000442 <GPIO_Init+0x6a>
            EXTI->FTSR |= (1 << pinNumber);
 8000416:	4b59      	ldr	r3, [pc, #356]	; (800057c <GPIO_Init+0x1a4>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	7afa      	ldrb	r2, [r7, #11]
 800041c:	2101      	movs	r1, #1
 800041e:	fa01 f202 	lsl.w	r2, r1, r2
 8000422:	4611      	mov	r1, r2
 8000424:	4a55      	ldr	r2, [pc, #340]	; (800057c <GPIO_Init+0x1a4>)
 8000426:	430b      	orrs	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pinNumber);
 800042a:	4b54      	ldr	r3, [pc, #336]	; (800057c <GPIO_Init+0x1a4>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	7afa      	ldrb	r2, [r7, #11]
 8000430:	2101      	movs	r1, #1
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a50      	ldr	r2, [pc, #320]	; (800057c <GPIO_Init+0x1a4>)
 800043c:	400b      	ands	r3, r1
 800043e:	6093      	str	r3, [r2, #8]
 8000440:	e031      	b.n	80004a6 <GPIO_Init+0xce>
        } else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	795b      	ldrb	r3, [r3, #5]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d115      	bne.n	8000476 <GPIO_Init+0x9e>
            EXTI->RTSR |= (1 << pinNumber);
 800044a:	4b4c      	ldr	r3, [pc, #304]	; (800057c <GPIO_Init+0x1a4>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	7afa      	ldrb	r2, [r7, #11]
 8000450:	2101      	movs	r1, #1
 8000452:	fa01 f202 	lsl.w	r2, r1, r2
 8000456:	4611      	mov	r1, r2
 8000458:	4a48      	ldr	r2, [pc, #288]	; (800057c <GPIO_Init+0x1a4>)
 800045a:	430b      	orrs	r3, r1
 800045c:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pinNumber);
 800045e:	4b47      	ldr	r3, [pc, #284]	; (800057c <GPIO_Init+0x1a4>)
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	7afa      	ldrb	r2, [r7, #11]
 8000464:	2101      	movs	r1, #1
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	43d2      	mvns	r2, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a43      	ldr	r2, [pc, #268]	; (800057c <GPIO_Init+0x1a4>)
 8000470:	400b      	ands	r3, r1
 8000472:	60d3      	str	r3, [r2, #12]
 8000474:	e017      	b.n	80004a6 <GPIO_Init+0xce>
        } else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795b      	ldrb	r3, [r3, #5]
 800047a:	2b06      	cmp	r3, #6
 800047c:	d113      	bne.n	80004a6 <GPIO_Init+0xce>
            EXTI->FTSR |= (1 << pinNumber);
 800047e:	4b3f      	ldr	r3, [pc, #252]	; (800057c <GPIO_Init+0x1a4>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	7afa      	ldrb	r2, [r7, #11]
 8000484:	2101      	movs	r1, #1
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a3b      	ldr	r2, [pc, #236]	; (800057c <GPIO_Init+0x1a4>)
 800048e:	430b      	orrs	r3, r1
 8000490:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR |= (1 << pinNumber);
 8000492:	4b3a      	ldr	r3, [pc, #232]	; (800057c <GPIO_Init+0x1a4>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	7afa      	ldrb	r2, [r7, #11]
 8000498:	2101      	movs	r1, #1
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a36      	ldr	r2, [pc, #216]	; (800057c <GPIO_Init+0x1a4>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6093      	str	r3, [r2, #8]
        }
        // EXTI line k is configured for pin k of GPIOx
        uint8_t EXTICRx = pinNumber / 4;
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	089b      	lsrs	r3, r3, #2
 80004aa:	72bb      	strb	r3, [r7, #10]
        uint8_t EXTIx = pinNumber % 4;
 80004ac:	7afb      	ldrb	r3, [r7, #11]
 80004ae:	f003 0303 	and.w	r3, r3, #3
 80004b2:	727b      	strb	r3, [r7, #9]
        uint8_t portcode = convertAddrToCode(pGPIO_Handle->pGPIOx);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff59 	bl	8000370 <convertAddrToCode>
 80004be:	4603      	mov	r3, r0
 80004c0:	723b      	strb	r3, [r7, #8]
        SYSCFG_PCLK_EN();
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <GPIO_Init+0x1a8>)
 80004c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c6:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <GPIO_Init+0x1a8>)
 80004c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004cc:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[EXTICRx] |= portcode << (4 * EXTIx);
 80004ce:	4a2d      	ldr	r2, [pc, #180]	; (8000584 <GPIO_Init+0x1ac>)
 80004d0:	7abb      	ldrb	r3, [r7, #10]
 80004d2:	3302      	adds	r3, #2
 80004d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d8:	7a39      	ldrb	r1, [r7, #8]
 80004da:	7a7b      	ldrb	r3, [r7, #9]
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	fa01 f303 	lsl.w	r3, r1, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	4927      	ldr	r1, [pc, #156]	; (8000584 <GPIO_Init+0x1ac>)
 80004e6:	7abb      	ldrb	r3, [r7, #10]
 80004e8:	4302      	orrs	r2, r0
 80004ea:	3302      	adds	r3, #2
 80004ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable delivery of the interrupt signal from EXTI block to the CPU
        EXTI->IMR |= 1 << pinNumber;
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <GPIO_Init+0x1a4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	7afa      	ldrb	r2, [r7, #11]
 80004f6:	2101      	movs	r1, #1
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a1f      	ldr	r2, [pc, #124]	; (800057c <GPIO_Init+0x1a4>)
 8000500:	430b      	orrs	r3, r1
 8000502:	6013      	str	r3, [r2, #0]
    }
    // 2. configure speed
    GPIO_SetReg(pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed, &pGPIO_Handle->pGPIOx->OSPEEDR, pinNumber, 2);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7998      	ldrb	r0, [r3, #6]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f103 0108 	add.w	r1, r3, #8
 8000510:	7afa      	ldrb	r2, [r7, #11]
 8000512:	2302      	movs	r3, #2
 8000514:	f7ff fef1 	bl	80002fa <GPIO_SetReg>
    // 3. configure pull up/down
    GPIO_SetReg(pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl, &pGPIO_Handle->pGPIOx->PUPDR, pinNumber, 2);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	79d8      	ldrb	r0, [r3, #7]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f103 010c 	add.w	r1, r3, #12
 8000524:	7afa      	ldrb	r2, [r7, #11]
 8000526:	2302      	movs	r3, #2
 8000528:	f7ff fee7 	bl	80002fa <GPIO_SetReg>
    // 4. configure output type
    GPIO_SetReg(pGPIO_Handle->GPIO_PinConfig.GPIO_PinOpType, &pGPIO_Handle->pGPIOx->OTYPER, pinNumber, 1);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7a18      	ldrb	r0, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	1d19      	adds	r1, r3, #4
 8000536:	7afa      	ldrb	r2, [r7, #11]
 8000538:	2301      	movs	r3, #1
 800053a:	f7ff fede 	bl	80002fa <GPIO_SetReg>
    // 5. configure alternate functionality
    if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	795b      	ldrb	r3, [r3, #5]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d115      	bne.n	8000572 <GPIO_Init+0x19a>
        volatile uint32_t *AFR;
        if (GPIO_PIN_NO_0 <= pinNumber && pinNumber <= GPIO_PIN_NO_7) {
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	2b07      	cmp	r3, #7
 800054a:	d804      	bhi.n	8000556 <GPIO_Init+0x17e>
            AFR = &pGPIO_Handle->pGPIOx->AFR[0];
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3320      	adds	r3, #32
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e003      	b.n	800055e <GPIO_Init+0x186>
        } else {
            AFR = &pGPIO_Handle->pGPIOx->AFR[1];
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3324      	adds	r3, #36	; 0x24
 800055c:	60fb      	str	r3, [r7, #12]
        }
        GPIO_SetReg(pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode, AFR, pinNumber % 8, 4);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7a58      	ldrb	r0, [r3, #9]
 8000562:	7afb      	ldrb	r3, [r7, #11]
 8000564:	f003 0307 	and.w	r3, r3, #7
 8000568:	b2da      	uxtb	r2, r3
 800056a:	2304      	movs	r3, #4
 800056c:	68f9      	ldr	r1, [r7, #12]
 800056e:	f7ff fec4 	bl	80002fa <GPIO_SetReg>
    }
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40013c00 	.word	0x40013c00
 8000580:	40023800 	.word	0x40023800
 8000584:	40013800 	.word	0x40013800

08000588 <GPIO_PCLK_Control>:
    } else {
        GPIOH_REG_RESET();
    }
}

void GPIO_PCLK_Control(GPIO_RegDef_t *pGPIOx, uint8_t en) {
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
    if (en == ENABLE) {
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d13d      	bne.n	8000616 <GPIO_PCLK_Control+0x8e>
        if (pGPIOx == GPIOA) {
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a3f      	ldr	r2, [pc, #252]	; (800069c <GPIO_PCLK_Control+0x114>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_PCLK_Control+0x28>
            GPIOA_PCLK_EN();
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a3e      	ldr	r2, [pc, #248]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
            GPIOE_PCLK_DI();
        } else {
            GPIOH_PCLK_DI();
        }
    }
}
 80005ae:	e06f      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        } else if (pGPIOx == GPIOB) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a3c      	ldr	r2, [pc, #240]	; (80006a4 <GPIO_PCLK_Control+0x11c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d106      	bne.n	80005c6 <GPIO_PCLK_Control+0x3e>
            GPIOB_PCLK_EN();
 80005b8:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a38      	ldr	r2, [pc, #224]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c4:	e064      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        } else if (pGPIOx == GPIOC) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a37      	ldr	r2, [pc, #220]	; (80006a8 <GPIO_PCLK_Control+0x120>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d106      	bne.n	80005dc <GPIO_PCLK_Control+0x54>
            GPIOC_PCLK_EN();
 80005ce:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a33      	ldr	r2, [pc, #204]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005da:	e059      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        } else if (pGPIOx == GPIOD) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a33      	ldr	r2, [pc, #204]	; (80006ac <GPIO_PCLK_Control+0x124>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d106      	bne.n	80005f2 <GPIO_PCLK_Control+0x6a>
            GPIOD_PCLK_EN();
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f0:	e04e      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        } else if (pGPIOx == GPIOE) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <GPIO_PCLK_Control+0x128>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d106      	bne.n	8000608 <GPIO_PCLK_Control+0x80>
            GPIOE_PCLK_EN();
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000600:	f043 0310 	orr.w	r3, r3, #16
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000606:	e043      	b.n	8000690 <GPIO_PCLK_Control+0x108>
            GPIOH_PCLK_EN();
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 800060e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000612:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000614:	e03c      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        if (pGPIOx == GPIOA) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <GPIO_PCLK_Control+0x114>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d106      	bne.n	800062c <GPIO_PCLK_Control+0xa4>
            GPIOA_PCLK_DI();
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062a:	e031      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        } else if (pGPIOx == GPIOB) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <GPIO_PCLK_Control+0x11c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d106      	bne.n	8000642 <GPIO_PCLK_Control+0xba>
            GPIOB_PCLK_DI();
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 800063a:	f023 0302 	bic.w	r3, r3, #2
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000640:	e026      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        } else if (pGPIOx == GPIOC) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <GPIO_PCLK_Control+0x120>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <GPIO_PCLK_Control+0xd0>
            GPIOC_PCLK_DI();
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000650:	f023 0304 	bic.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000656:	e01b      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        } else if (pGPIOx == GPIOD) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <GPIO_PCLK_Control+0x124>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <GPIO_PCLK_Control+0xe6>
            GPIOD_PCLK_DI();
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000666:	f023 0308 	bic.w	r3, r3, #8
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066c:	e010      	b.n	8000690 <GPIO_PCLK_Control+0x108>
        } else if (pGPIOx == GPIOE) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <GPIO_PCLK_Control+0x128>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <GPIO_PCLK_Control+0xfc>
            GPIOE_PCLK_DI();
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 800067c:	f023 0310 	bic.w	r3, r3, #16
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000682:	e005      	b.n	8000690 <GPIO_PCLK_Control+0x108>
            GPIOH_PCLK_DI();
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <GPIO_PCLK_Control+0x118>)
 800068a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800068e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40020000 	.word	0x40020000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020400 	.word	0x40020400
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	40021000 	.word	0x40021000

080006b4 <GPIO_WritePin>:

uint16_t GPIO_ReadPort(GPIO_RegDef_t *pGPIOx) {
    return pGPIOx->IDR;
}

void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber, uint8_t value) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
 80006c0:	4613      	mov	r3, r2
 80006c2:	70bb      	strb	r3, [r7, #2]
    pGPIOx->ODR &= ~(1 << pinNumber);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	78fa      	ldrb	r2, [r7, #3]
 80006ca:	2101      	movs	r1, #1
 80006cc:	fa01 f202 	lsl.w	r2, r1, r2
 80006d0:	43d2      	mvns	r2, r2
 80006d2:	401a      	ands	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	615a      	str	r2, [r3, #20]
    pGPIOx->ODR |= (value << pinNumber);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	78b9      	ldrb	r1, [r7, #2]
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	fa01 f202 	lsl.w	r2, r1, r2
 80006e4:	431a      	orrs	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	615a      	str	r2, [r3, #20]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <GPIO_TogglePin>:

void GPIO_WritePort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
    pGPIOx->ODR = value;
}

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	460b      	mov	r3, r1
 8000700:	70fb      	strb	r3, [r7, #3]
    pGPIOx->ODR ^= (1 << pinNumber);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	78fa      	ldrb	r2, [r7, #3]
 8000708:	2101      	movs	r1, #1
 800070a:	fa01 f202 	lsl.w	r2, r1, r2
 800070e:	405a      	eors	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	615a      	str	r2, [r3, #20]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <GPIO_IRQ_InterruptConfig>:

void GPIO_IRQ_InterruptConfig(uint8_t IRQ_number, uint8_t en) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    if (en == ENABLE) {
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10a      	bne.n	800074c <GPIO_IRQ_InterruptConfig+0x2c>
        *NVIC_ISER |= (1 << IRQ_number);
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <GPIO_IRQ_InterruptConfig+0x4c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	79fa      	ldrb	r2, [r7, #7]
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	4611      	mov	r1, r2
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <GPIO_IRQ_InterruptConfig+0x4c>)
 8000746:	430b      	orrs	r3, r1
 8000748:	6013      	str	r3, [r2, #0]
    } else {
        *NVIC_ICER |= (1 << IRQ_number);
    }
}
 800074a:	e009      	b.n	8000760 <GPIO_IRQ_InterruptConfig+0x40>
        *NVIC_ICER |= (1 << IRQ_number);
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <GPIO_IRQ_InterruptConfig+0x50>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f202 	lsl.w	r2, r1, r2
 8000758:	4611      	mov	r1, r2
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <GPIO_IRQ_InterruptConfig+0x50>)
 800075c:	430b      	orrs	r3, r1
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100
 8000770:	e000e180 	.word	0xe000e180

08000774 <GPIO_IRQ_Handling>:

    uint8_t shift_amount = (8 * prix) + (8 - NO_BITS_IMPLEMENTED);
    *(NVIC_PR_BASEADDR + 4 * iprx) |= (priority << shift_amount);
}

void GPIO_IRQ_Handling(uint8_t pinNumber) {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
    if (EXTI->PR & (1 << pinNumber)) {
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <GPIO_IRQ_Handling+0x3c>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	79fa      	ldrb	r2, [r7, #7]
 8000784:	2101      	movs	r1, #1
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	4013      	ands	r3, r2
 800078c:	2b00      	cmp	r3, #0
 800078e:	d009      	beq.n	80007a4 <GPIO_IRQ_Handling+0x30>
        EXTI->PR |= (1 << pinNumber);
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <GPIO_IRQ_Handling+0x3c>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <GPIO_IRQ_Handling+0x3c>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6153      	str	r3, [r2, #20]
    }
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	40013c00 	.word	0x40013c00

080007b4 <__libc_init_array>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	4d0d      	ldr	r5, [pc, #52]	; (80007ec <__libc_init_array+0x38>)
 80007b8:	4c0d      	ldr	r4, [pc, #52]	; (80007f0 <__libc_init_array+0x3c>)
 80007ba:	1b64      	subs	r4, r4, r5
 80007bc:	10a4      	asrs	r4, r4, #2
 80007be:	2600      	movs	r6, #0
 80007c0:	42a6      	cmp	r6, r4
 80007c2:	d109      	bne.n	80007d8 <__libc_init_array+0x24>
 80007c4:	4d0b      	ldr	r5, [pc, #44]	; (80007f4 <__libc_init_array+0x40>)
 80007c6:	4c0c      	ldr	r4, [pc, #48]	; (80007f8 <__libc_init_array+0x44>)
 80007c8:	f000 f820 	bl	800080c <_init>
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	10a4      	asrs	r4, r4, #2
 80007d0:	2600      	movs	r6, #0
 80007d2:	42a6      	cmp	r6, r4
 80007d4:	d105      	bne.n	80007e2 <__libc_init_array+0x2e>
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007dc:	4798      	blx	r3
 80007de:	3601      	adds	r6, #1
 80007e0:	e7ee      	b.n	80007c0 <__libc_init_array+0xc>
 80007e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e6:	4798      	blx	r3
 80007e8:	3601      	adds	r6, #1
 80007ea:	e7f2      	b.n	80007d2 <__libc_init_array+0x1e>
 80007ec:	08000824 	.word	0x08000824
 80007f0:	08000824 	.word	0x08000824
 80007f4:	08000824 	.word	0x08000824
 80007f8:	08000828 	.word	0x08000828

080007fc <memset>:
 80007fc:	4402      	add	r2, r0
 80007fe:	4603      	mov	r3, r0
 8000800:	4293      	cmp	r3, r2
 8000802:	d100      	bne.n	8000806 <memset+0xa>
 8000804:	4770      	bx	lr
 8000806:	f803 1b01 	strb.w	r1, [r3], #1
 800080a:	e7f9      	b.n	8000800 <memset+0x4>

0800080c <_init>:
 800080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080e:	bf00      	nop
 8000810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000812:	bc08      	pop	{r3}
 8000814:	469e      	mov	lr, r3
 8000816:	4770      	bx	lr

08000818 <_fini>:
 8000818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081a:	bf00      	nop
 800081c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800081e:	bc08      	pop	{r3}
 8000820:	469e      	mov	lr, r3
 8000822:	4770      	bx	lr
